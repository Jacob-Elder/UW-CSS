1. My program works exactly to specifications. The only thing that is not implemented is some of the copy constructors, which I included for extendability.
2. My hash tables are located within the factory class and within the store, there are three: storeInventory and transactionInventory. The hash table contained within the store is a bucket hash with binary tree characteristics.
3. For movie data, I read in the data4movies.txt in the store. I grab the first character input, send that to the hash() function, input the integer returned from the hash function into the storeInventory factory, and create an object if available. If object available, I then send the rest of the infile to the set data function for that object. Otherwise the rest of the line is read in and thrown away. Once the object is created with data, I insert it into is proper coordinating location within the storeInventory within the store and it is sorted into a binary search tree according to its specified sort.
4. For the transactions, I read in the data4commands.txt into the processTransactions() method. I then grab the first character. Depending on what that is, I will either display the store's current inventory, show a specified user's data, create either a borrow or return object and insert it into it's coordinating customer's transactionHistory, or throw away bad data and output an Error message.
5. The processTransaction() method is a very large switch statement (if..else .. if). I couldn't figure out whether to create more objects within the factory for each command, or if I should call a method when each index within the factory was touched. 
6. I am particularly proud that I did this project on my own. I wrote it from the UML I created and wired everything up. I must admit it did take me throwing the whole project away 3 times before I got everything wired correctly.